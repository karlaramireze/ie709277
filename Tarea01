#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct{
	char nombre[15];
	float calificacion;
} Profesor;


//float averageArray(Profesor   , int ); //De los repetidos, hace un promedio

void readArray(Profesor *profe1, int *pN){
	int i;
	scanf("%d",pN);
	for (i=0; i< (*pN); i++){
		scanf("%s", (profe1->nombre)+i);
		scanf("%f", (profe1->calificacion)+i); //PREGUNTAR QUE PASA
	}
}

void printArray(Profesor * profe1, int n){
	int i;
	for(i=0; i<n; i++){
		printf("%s\n", (profe1->nombre)+i); //Marca error en la asignación
		printf("%f\n", (profe1->calificacion)+i);
	}
}

void mergeArrays(Profesor *profe1, int *a,Profesor *profe2, int *b, Profesor *profe3, int *c){
	int i,j;
	for (i=0; i<(*a); i++){
		(profe3[i].nombre) = (profe1[i].nombre); //Marca error en la asignación
		(profe3[i].calificacion) = (profe1[i].calificacion);
	}

	for (j= (*a); j<(*c); j++){
		(profe3[j].nombre) = (profe2[j].nombre);
		(profe3[j].calificacion) = (profe2[j].calificacion);
	}
}

void sortArray(Profesor *profe3, int *a){
	
}



int main(){
	Profesor arr1[20];  //Primer arreglo
	Profesor arr2[20];  //Segundo arreglo
	Profesor arrF[40];  //Arreglo final, con elementos fusionados y ordenados
	int n1, n2; //Longitud de los arreglos
	readArray(arr1, &n1); //Leer el primer arreglo
	readArray(arr2, &n2); //Leer el segundo arreglo
	mergeArrays(arr1, &n1, arr2, &n2, arrF, 40);  //Fusionar los dos arreglos en un tercer arreglo
	sortArray(arrF, 40);  //Ordenar los elementos del tercer arreglo, recuerde que pueden existir profesores repetidos
	printArray(arrF, 40);   //Imprimir el resultado final

return 0;
}
